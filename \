/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: minh-ngu <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/11/15 18:23:54 by minh-ngu          #+#    #+#             */
/*   Updated: 2022/11/21 13:10:12 by minh-ngu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include "Libft/libft.h"

char*	hex_address(char *hex, long unsigned int i)
{
	long unsigned int i0;
	int		j;
	int		mod;
	char	*str;

	i0 = i;
	j = 0;
	while (i != 0)
	{
		i = (i - i % 16) / 16;
		j++;
	}
	str = malloc(sizeof(char) * (j + 1));
	if (!str)
		return (0);
	str[j] = 0;
	i = i0;
	j--;
	while (i != 0)
	{
		mod = i % 16;
		i = (i - mod) / 16;
		str[j--] = hex[mod];
	}
	return str;
}

int	ft_printf(const char *s, ...)
{
	va_list	ap;
	int	ar;
	int	flag_len;
	int	i;
	int	start;
	char	type;
	char	*str;
	char	*str2;
	char	*types;
	char	*flag;
	char	*flags;
	char	*base10;
	char	*hex;
	char	*HEX;
	t_list	*out;
	t_list	*out0;

	va_start(ap, s);
	hex = "0123456789abcdef";
	HEX = "0123456789ABCDEF";
	base10 = "0123456789";
	types = "cspdiuxX%";
	flags = "-0.# +";
	type = 0;
	printf("%s", s);
	i = 0;
	start = 0;
	out = 0;
	while (s[i])
	{
		if (s[i] == '%')
		{
			if (i > start)
			{
				if (out)
					ft_lstadd_back(&out, ft_lstnew(ft_substr(s, start, i - start)));
				else
					out = ft_lstnew(ft_substr(s, start, i - start));
			}
			i++;
			flag_len = 0;
			//printf("%c %d %d %d\n", s[i], ft_strchr(base10, s[i]), ft_strchr(flags, s[i]), ft_strchr(types, s[i])); 
			while (s[i] && (ft_strchr(base10, s[i]) || ft_strchr(flags, s[i])) && !ft_strchr(types, s[i]))
			{
				i++;
				flag_len++;
			}
			if (ft_strchr(types, s[i]))
				type = s[i];
			flag = ft_substr(&s[i - flag_len], 0, flag_len);
			printf("type = %c, flag = %s, flag_len = %d\n", type, flag, flag_len); 
			if (type == 'c')
			{
				str = ft_strdup(" ");
				str[0] = (char) va_arg(ap, int);
				ft_lstadd_back(&out, ft_lstnew(str));
			}
			if (type == 's')
			{
				str = ft_strdup((const char *) va_arg(ap, char *));
				ft_lstadd_back(&out, ft_lstnew(str));
			}
			if (type == 'p')
			{
				str = hex_address(hex, va_arg(ap, void *));
				str2 = malloc(sizeof(char) * (ft_strlen(str) + 3));
				ft_strlcpy(str2, "0x", 3);
				ft_strlcat(str2, str, ft_strlen(str) + 3);
				ft_lstadd_back(&out, ft_lstnew(str2));
				free(str);
			}
			if (type == 'i' || type == 'd')
			{
				ar = va_arg(ap, int);
				ft_lstadd_back(&out, ft_lstnew(ft_itoa(ar)));
			}
			if (type == 'u')
			{
				ar = va_arg(ap, int);
				if (ar >= 0)
					ft_lstadd_back(&out, ft_lstnew(ft_itoa(ar)));
				else
					ft_lstadd_back(&out, ft_lstnew(ft_itoa(i-ar)));
			}
			if (type == 'i' || type == 'd')
			{
				ar = va_arg(ap, int);
				ft_lstadd_back(&out, ft_lstnew(ft_itoa(ar)));
			}
			if (type == 'x')
			{
				str = hex_address(hex, va_arg(ap, void *));
				if (ft_strchr(flag, '#'))
				{
					str2 = malloc(sizeof(char) * (ft_strlen(str) + 3));
					ft_strlcpy(str2, "0x", 3);
					ft_strlcat(str2, str, ft_strlen(str) + 3);
					ft_lstadd_back(&out, ft_lstnew(str2));
					free(str);
				}
				else
					ft_lstadd_back(&out, ft_lstnew(str));
			}
			if (type == 'X')
			{
				str = hex_address(HEX, (unsigned int) va_arg(ap, void *));
				if (ft_strchr(flag, '#'))
				{
					str2 = malloc(sizeof(char) * (ft_strlen(str) + 3));
					ft_strlcpy(str2, "0x", 3);
					ft_strlcat(str2, str, ft_strlen(str) + 3);
					ft_lstadd_back(&out, ft_lstnew(str2));
					free(str);
				}
				else
					ft_lstadd_back(&out, ft_lstnew(str));
			}
			if (type == '%')
				ft_lstadd_back(&out, ft_lstnew(ft_strdup("%")));
			free(flag);
			start = i + 1;
		}
		if (s[i])
			i++;
	}
	if (i > start)
	{
		if (out)
			ft_lstadd_back(&out, ft_lstnew(ft_substr(s, start, i - start)));
		else
			out = ft_lstnew(ft_substr(s, start, i - start));
	}
	out0 = out;
	while (out)
	{
		ft_putstr_fd(out->content, 1);
		out = out->next;
	}
	ft_lstclear(&out0, free);
	va_end(ap);
	return (0);
}
